pipeline {
    environment{
        BUILD_TRIGGER_BY = "${currentBuild.getBuildCauses()[0].shortDescription}"
    }
    agent {
        node {
            label 'DSS'
	    customWorkspace '/home/paywalletdevops/new_paywallet_backend_services/helper-service'
        }
    }
	parameters {
		string(name: 'Branch', defaultValue: 'temp-develop', description: 'Enter the branch to deploy?')
	}
    stages {
        stage('Code checkout') {
            steps {
                git branch: '$Branch', credentialsId: 'Github-Key', url: 'https://github.com/Maveric-Digital/helper-service.git'
                sh'''
                        sed -i 's/dev/uat/g' Dockerfile
                '''
            }
        }
	stage ('Maven Build for helper-service') {
            steps {
                sh """
                mvn clean install -DskipTests
                """
            }
        }
	stage ('Sonarqube') {
            steps {
                sh """
		    mvn sonar:sonar \
			-Dsonar.projectKey=UAT-helper-service \
			-Dsonar.host.url=https://sonar-dev.paywalletllc.com \
			-Dsonar.login=6e3c5187a1c8fc2d727f00bf69c05b21deb91fa9
			-Dsonar.projectName=UAT-helper-service
                """
            }
        }
	stage ('Remove the docker container and images') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sh """
			sudo docker rm -f helper-service_container
			sudo docker rmi helper-service
                    """
                }
            }
        }
	stage ('Run Docker-compose') {
            steps {
                sh """
                    sudo docker-compose -f docker-compose.yml up -d
                """
            }
        }
    }
    post {
        success {
                slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) ${BUILD_TRIGGER_BY}")
        }       
        failure {
                slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) ${BUILD_TRIGGER_BY}")
        }       
    }
}
